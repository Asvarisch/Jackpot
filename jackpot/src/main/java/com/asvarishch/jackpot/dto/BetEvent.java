/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.asvarishch.jackpot.dto;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class BetEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6149146615175603718L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BetEvent\",\"namespace\":\"com.asvarishch.jackpot.dto\",\"fields\":[{\"name\":\"betId\",\"type\":\"long\"},{\"name\":\"userId\",\"type\":\"long\"},{\"name\":\"jackpotId\",\"type\":\"long\"},{\"name\":\"betAmount\",\"type\":{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":19,\"scale\":2}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<BetEvent> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<BetEvent> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<BetEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<BetEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<BetEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this BetEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a BetEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a BetEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static BetEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private long betId;
  private long userId;
  private long jackpotId;
  private java.math.BigDecimal betAmount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public BetEvent() {}

  /**
   * All-args constructor.
   * @param betId The new value for betId
   * @param userId The new value for userId
   * @param jackpotId The new value for jackpotId
   * @param betAmount The new value for betAmount
   */
  public BetEvent(java.lang.Long betId, java.lang.Long userId, java.lang.Long jackpotId, java.math.BigDecimal betAmount) {
    this.betId = betId;
    this.userId = userId;
    this.jackpotId = jackpotId;
    this.betAmount = betAmount;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return betId;
    case 1: return userId;
    case 2: return jackpotId;
    case 3: return betAmount;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      new org.apache.avro.Conversions.DecimalConversion(),
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: betId = (java.lang.Long)value$; break;
    case 1: userId = (java.lang.Long)value$; break;
    case 2: jackpotId = (java.lang.Long)value$; break;
    case 3: betAmount = (java.math.BigDecimal)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'betId' field.
   * @return The value of the 'betId' field.
   */
  public long getBetId() {
    return betId;
  }


  /**
   * Sets the value of the 'betId' field.
   * @param value the value to set.
   */
  public void setBetId(long value) {
    this.betId = value;
  }

  /**
   * Gets the value of the 'userId' field.
   * @return The value of the 'userId' field.
   */
  public long getUserId() {
    return userId;
  }


  /**
   * Sets the value of the 'userId' field.
   * @param value the value to set.
   */
  public void setUserId(long value) {
    this.userId = value;
  }

  /**
   * Gets the value of the 'jackpotId' field.
   * @return The value of the 'jackpotId' field.
   */
  public long getJackpotId() {
    return jackpotId;
  }


  /**
   * Sets the value of the 'jackpotId' field.
   * @param value the value to set.
   */
  public void setJackpotId(long value) {
    this.jackpotId = value;
  }

  /**
   * Gets the value of the 'betAmount' field.
   * @return The value of the 'betAmount' field.
   */
  public java.math.BigDecimal getBetAmount() {
    return betAmount;
  }


  /**
   * Sets the value of the 'betAmount' field.
   * @param value the value to set.
   */
  public void setBetAmount(java.math.BigDecimal value) {
    this.betAmount = value;
  }

  /**
   * Creates a new BetEvent RecordBuilder.
   * @return A new BetEvent RecordBuilder
   */
  public static com.asvarishch.jackpot.dto.BetEvent.Builder newBuilder() {
    return new com.asvarishch.jackpot.dto.BetEvent.Builder();
  }

  /**
   * Creates a new BetEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new BetEvent RecordBuilder
   */
  public static com.asvarishch.jackpot.dto.BetEvent.Builder newBuilder(com.asvarishch.jackpot.dto.BetEvent.Builder other) {
    if (other == null) {
      return new com.asvarishch.jackpot.dto.BetEvent.Builder();
    } else {
      return new com.asvarishch.jackpot.dto.BetEvent.Builder(other);
    }
  }

  /**
   * Creates a new BetEvent RecordBuilder by copying an existing BetEvent instance.
   * @param other The existing instance to copy.
   * @return A new BetEvent RecordBuilder
   */
  public static com.asvarishch.jackpot.dto.BetEvent.Builder newBuilder(com.asvarishch.jackpot.dto.BetEvent other) {
    if (other == null) {
      return new com.asvarishch.jackpot.dto.BetEvent.Builder();
    } else {
      return new com.asvarishch.jackpot.dto.BetEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for BetEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BetEvent>
    implements org.apache.avro.data.RecordBuilder<BetEvent> {

    private long betId;
    private long userId;
    private long jackpotId;
    private java.math.BigDecimal betAmount;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.asvarishch.jackpot.dto.BetEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.betId)) {
        this.betId = data().deepCopy(fields()[0].schema(), other.betId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.userId)) {
        this.userId = data().deepCopy(fields()[1].schema(), other.userId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.jackpotId)) {
        this.jackpotId = data().deepCopy(fields()[2].schema(), other.jackpotId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.betAmount)) {
        this.betAmount = data().deepCopy(fields()[3].schema(), other.betAmount);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing BetEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(com.asvarishch.jackpot.dto.BetEvent other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.betId)) {
        this.betId = data().deepCopy(fields()[0].schema(), other.betId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.userId)) {
        this.userId = data().deepCopy(fields()[1].schema(), other.userId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.jackpotId)) {
        this.jackpotId = data().deepCopy(fields()[2].schema(), other.jackpotId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.betAmount)) {
        this.betAmount = data().deepCopy(fields()[3].schema(), other.betAmount);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'betId' field.
      * @return The value.
      */
    public long getBetId() {
      return betId;
    }


    /**
      * Sets the value of the 'betId' field.
      * @param value The value of 'betId'.
      * @return This builder.
      */
    public com.asvarishch.jackpot.dto.BetEvent.Builder setBetId(long value) {
      validate(fields()[0], value);
      this.betId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'betId' field has been set.
      * @return True if the 'betId' field has been set, false otherwise.
      */
    public boolean hasBetId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'betId' field.
      * @return This builder.
      */
    public com.asvarishch.jackpot.dto.BetEvent.Builder clearBetId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'userId' field.
      * @return The value.
      */
    public long getUserId() {
      return userId;
    }


    /**
      * Sets the value of the 'userId' field.
      * @param value The value of 'userId'.
      * @return This builder.
      */
    public com.asvarishch.jackpot.dto.BetEvent.Builder setUserId(long value) {
      validate(fields()[1], value);
      this.userId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'userId' field has been set.
      * @return True if the 'userId' field has been set, false otherwise.
      */
    public boolean hasUserId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'userId' field.
      * @return This builder.
      */
    public com.asvarishch.jackpot.dto.BetEvent.Builder clearUserId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'jackpotId' field.
      * @return The value.
      */
    public long getJackpotId() {
      return jackpotId;
    }


    /**
      * Sets the value of the 'jackpotId' field.
      * @param value The value of 'jackpotId'.
      * @return This builder.
      */
    public com.asvarishch.jackpot.dto.BetEvent.Builder setJackpotId(long value) {
      validate(fields()[2], value);
      this.jackpotId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'jackpotId' field has been set.
      * @return True if the 'jackpotId' field has been set, false otherwise.
      */
    public boolean hasJackpotId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'jackpotId' field.
      * @return This builder.
      */
    public com.asvarishch.jackpot.dto.BetEvent.Builder clearJackpotId() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'betAmount' field.
      * @return The value.
      */
    public java.math.BigDecimal getBetAmount() {
      return betAmount;
    }


    /**
      * Sets the value of the 'betAmount' field.
      * @param value The value of 'betAmount'.
      * @return This builder.
      */
    public com.asvarishch.jackpot.dto.BetEvent.Builder setBetAmount(java.math.BigDecimal value) {
      validate(fields()[3], value);
      this.betAmount = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'betAmount' field has been set.
      * @return True if the 'betAmount' field has been set, false otherwise.
      */
    public boolean hasBetAmount() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'betAmount' field.
      * @return This builder.
      */
    public com.asvarishch.jackpot.dto.BetEvent.Builder clearBetAmount() {
      betAmount = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public BetEvent build() {
      try {
        BetEvent record = new BetEvent();
        record.betId = fieldSetFlags()[0] ? this.betId : (java.lang.Long) defaultValue(fields()[0]);
        record.userId = fieldSetFlags()[1] ? this.userId : (java.lang.Long) defaultValue(fields()[1]);
        record.jackpotId = fieldSetFlags()[2] ? this.jackpotId : (java.lang.Long) defaultValue(fields()[2]);
        record.betAmount = fieldSetFlags()[3] ? this.betAmount : (java.math.BigDecimal) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<BetEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<BetEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<BetEvent>
    READER$ = (org.apache.avro.io.DatumReader<BetEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










